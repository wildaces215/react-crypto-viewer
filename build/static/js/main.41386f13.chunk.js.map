{"version":3,"sources":["components/Home.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","cryptos","fetch","then","results","json","data","setState","console","log","this","document","title","style","color","Container","Paper","Table","backgroundColor","TableHead","TableCell","align","TableBody","map","crypto","TableRow","key","name","symbol","priceUsd","Component","Navbar","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","theme","createMuiTheme","palette","primary","main","secondary","table","App","ThemeProvider","className","height","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4WAoEeA,G,kBAvDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,IAHM,E,iFAOE,IAAD,OAClBC,MAAM,4CACHC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEN,QAASK,EAAKA,OAC9BE,QAAQC,IAAI,EAAKT,MAAMC,YAE3BO,QAAQC,IAAIC,KAAKV,MAAMC,SACvBU,SAASC,MAAQ,kB,+BAIjB,OACE,6BACE,gDACA,wBAAIC,MAAO,CAAEC,MAAO,UAApB,4CAGA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOJ,MAAO,CAAEK,gBAAiB,YAC/B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,MAAM,UAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,eAEF,kBAACC,EAAA,EAAD,CAAWT,MAAO,CAAEC,MAAO,UACxBJ,KAAKV,MAAMC,QAAQsB,KAAI,SAAAC,GAAM,OAC5B,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAOG,MACpB,kBAACP,EAAA,EAAD,CAAWP,MAAO,CAAEC,MAAO,QAAUO,MAAM,UACxCG,EAAOI,QAEV,kBAACR,EAAA,EAAD,CAAWP,MAAO,CAAEC,MAAO,QAAUO,MAAM,UACxCG,EAAOG,MAEV,kBAACP,EAAA,EAAD,CAAWP,MAAO,CAAEC,MAAO,QAAUO,MAAM,UACxCG,EAAOK,uB,GA5CXC,c,gCCcJC,E,iLAhBX,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLtB,MAAM,UACNuB,aAAW,SAEb,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,+B,GAXST,a,wCCCfU,EAAQ,IAAIC,IAAe,CAC/BC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,YAErBE,MAAO,CACL5B,gBAAiB,aAqBN6B,MAhBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAeR,MAAOA,GACpB,kBAAC,IAAD,KACE,yBACES,UAAU,MACVpC,MAAO,CAAEK,gBAAiB,UAAWgC,OAAQ,UAE7C,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWtD,QCjBjBuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShD,SAASiD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.41386f13.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Container from \"@material-ui/core/Container\";\nimport { createStyles } from \"@material-ui/styles\";\nimport { Typography } from \"@material-ui/core\";\n\nimport \"./stylec.css\";\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cryptos: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.coincap.io/v2/assets?limit=5\")\n      .then(results => results.json())\n      .then(data => {\n        this.setState({ cryptos: data.data });\n        console.log(this.state.cryptos);\n      });\n    console.log(this.state.cryptos);\n    document.title = \"Crypto Viewer\";\n  }\n\n  render() {\n    return (\n      <div>\n        <title>Crypto Viewer</title>\n        <h1 style={{ color: \"white\" }}>\n          Current Major Crytocurrencies and Prices\n        </h1>\n        <Container>\n          <Paper>\n            <Table style={{ backgroundColor: \"#dfdfbf\" }}>\n              <TableHead>\n                <TableCell align=\"center\">Symbol</TableCell>\n                <TableCell align=\"center\">Name</TableCell>\n                <TableCell align=\"center\">Price(USD)</TableCell>\n              </TableHead>\n              <TableBody style={{ color: \"white\" }}>\n                {this.state.cryptos.map(crypto => (\n                  <TableRow key={crypto.name}>\n                    <TableCell style={{ color: \"gray\" }} align=\"center\">\n                      {crypto.symbol}\n                    </TableCell>\n                    <TableCell style={{ color: \"gray\" }} align=\"center\">\n                      {crypto.name}\n                    </TableCell>\n                    <TableCell style={{ color: \"gray\" }} align=\"center\">\n                      {crypto.priceUsd}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Paper>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default Home;\n","import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\n//hi world!s\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n            ></IconButton>\n            <Typography variant=\"h6\">Crypto Prices Viewer</Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\nexport default Navbar;\n","import React from \"react\";\n\nimport Home from \"./components/Home\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst theme = new createMuiTheme({\n  palette: {\n    primary: { main: \"#202040\" },\n    secondary: { main: \"#202060\" }\n  },\n  table: {\n    backgroundColor: \"#dfdfbf\"\n  }\n});\n\n//https://colorhunt.co/palette/156620\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <BrowserRouter>\n        <div\n          className=\"App\"\n          style={{ backgroundColor: \"#282850\", height: \"100vh\" }}\n        >\n          <Navbar />\n          <Route path=\"/\" component={Home}></Route>\n        </div>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}